{"version":3,"sources":["webpack:///../node_modules/l10n.js/l10n.js"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+EAA+E;AAC/E;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAAS;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,SAAS;AAChB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;;AAEH;AACA;AACA,CAAC;AACD;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC","file":"npm.l10n.js.0e27db05c56cc07e3902.js","sourcesContent":["/*\r\n * l10n.js\r\n * 2014-05-02\r\n * \r\n * By Eli Grey, http://eligrey.com\r\n * Licensed under the MIT License\r\n *   See https://github.com/eligrey/l10n.js/blob/master/LICENSE.md\r\n */\r\n\r\n/*global XMLHttpRequest, setTimeout, document, navigator, ActiveXObject*/\r\n\r\n/*! @source http://purl.eligrey.com/github/l10n.js/blob/master/l10n.js*/\r\n\r\n(function () {\r\n\"use strict\";\r\n\r\nvar\r\n  undef_type = \"undefined\"\r\n, string_type = \"string\"\r\n, nav = self.navigator\r\n, String_ctr = String\r\n, has_own_prop = Object.prototype.hasOwnProperty\r\n, load_queues = {}\r\n, localizations = {}\r\n, FALSE = !1\r\n, TRUE = !0\r\n// the official format is application/vnd.oftn.l10n+json, though l10n.js will also\r\n// accept application/x-l10n+json and application/l10n+json\r\n, l10n_js_media_type = /^\\s*application\\/(?:vnd\\.oftn\\.|x-)?l10n\\+json\\s*(?:$|;)/i\r\n, XHR\r\n\r\n// property minification aids\r\n, $locale = \"locale\"\r\n, $default_locale = \"defaultLocale\"\r\n, $to_locale_string = \"toLocaleString\"\r\n, $to_lowercase = \"toLowerCase\"\r\n\r\n, array_index_of = Array.prototype.indexOf || function (item) {\r\n\tvar\r\n\t  len = this.length\r\n\t, i   = 0\r\n\t;\r\n\t\r\n\tfor (; i < len; i++) {\r\n\t\tif (i in this && this[i] === item) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\t\r\n\treturn -1;\r\n}\r\n, request_JSON = function (uri) {\r\n\tvar req  = new XHR(),\r\n\t\tdata = {};\r\n\t\r\n\t// sadly, this has to be blocking to allow for a graceful degrading API\r\n\treq.open(\"GET\", uri, FALSE);\r\n\treq.send(null);\r\n\t\r\n\t// Status codes can be inconsistent across browsers so we simply try to parse\r\n\t// the response text and catch any errors. This deals with failed requests as\r\n\t// well as malformed json files.\r\n\ttry {\r\n\t\tdata = JSON.parse(req.responseText);\r\n\t} catch(e) {\r\n\t\t// warn about error without stopping execution\r\n\t\tsetTimeout(function () {\r\n\t\t\t// Error messages are not localized as not to cause an infinite loop\r\n\t\t\tvar l10n_err = new Error(\"Unable to load localization data: \" + uri);\r\n\t\t\tl10n_err.name = \"Localization Error\";\r\n\t\t\tthrow l10n_err;\r\n\t\t}, 0);\r\n\t}\r\n\r\n\treturn data;\r\n}\r\n, load = String_ctr[$to_locale_string] = function (data) {\r\n\t// don't handle function.toLocaleString(indentationAmount:Number)\r\n\tif (arguments.length > 0 && typeof data !== \"number\") {\r\n\t\tif (typeof data === string_type) {\r\n\t\t\tload(request_JSON(data));\r\n\t\t} else if (data === FALSE) {\r\n\t\t\t// reset all localizations\r\n\t\t\tlocalizations = {};\r\n\t\t} else {\r\n\t\t\t// Extend current localizations instead of completely overwriting them\r\n\t\t\tvar locale, localization, message;\r\n\t\t\tfor (locale in data) {\r\n\t\t\t\tif (has_own_prop.call(data, locale)) {\r\n\t\t\t\t\tlocalization = data[locale];\r\n\t\t\t\t\tlocale = locale[$to_lowercase]();\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (!(locale in localizations) || localization === FALSE) {\r\n\t\t\t\t\t\t// reset locale if not existing or reset flag is specified\r\n\t\t\t\t\t\tlocalizations[locale] = {};\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tif (localization === FALSE) {\r\n\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t// URL specified\r\n\t\t\t\t\tif (typeof localization === string_type) {\r\n\t\t\t\t\t\tif (String_ctr[$locale][$to_lowercase]().indexOf(locale) === 0) {\r\n\t\t\t\t\t\t\tlocalization = request_JSON(localization);\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t// queue loading locale if not needed\r\n\t\t\t\t\t\t\tif (!(locale in load_queues)) {\r\n\t\t\t\t\t\t\t\tload_queues[locale] = [];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tload_queues[locale].push(localization);\r\n\t\t\t\t\t\t\tcontinue;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\tfor (message in localization) {\r\n\t\t\t\t\t\tif (has_own_prop.call(localization, message)) {\r\n\t\t\t\t\t\t\tlocalizations[locale][message] = localization[message];\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t// Return what function.toLocaleString() normally returns\r\n\treturn Function.prototype[$to_locale_string].apply(String_ctr, arguments);\r\n}\r\n, process_load_queue = function (locale) {\r\n\tvar\r\n\t  queue = load_queues[locale]\r\n\t, i = 0\r\n\t, len = queue.length\r\n\t, localization\r\n\t;\r\n\t\r\n\tfor (; i < len; i++) {\r\n\t\tlocalization = {};\r\n\t\tlocalization[locale] = request_JSON(queue[i]);\r\n\t\tload(localization);\r\n\t}\r\n\t\r\n\tdelete load_queues[locale];\r\n}\r\n, use_default\r\n, localize = String_ctr.prototype[$to_locale_string] = function () {\r\n\tvar\r\n\t  using_default = use_default\r\n\t, current_locale = String_ctr[using_default ? $default_locale : $locale]\r\n\t, parts = current_locale[$to_lowercase]().split(\"-\")\r\n\t, i = parts.length\r\n\t, this_val = this.valueOf()\r\n\t, locale\r\n\t;\r\n\r\n\tuse_default = FALSE;\r\n\t\r\n\t// Iterate through locales starting at most-specific until a localization is found\r\n\tdo {\r\n\t\tlocale = parts.slice(0, i).join(\"-\");\r\n\t\t// load locale if not loaded\r\n\t\tif (locale in load_queues) {\r\n\t\t\tprocess_load_queue(locale);\r\n\t\t}\r\n\t\tif (locale in localizations && this_val in localizations[locale]) {\r\n\t\t\treturn localizations[locale][this_val];\r\n\t\t}\r\n\t}\r\n\twhile (i --> 1);\r\n\t\r\n\tif (!using_default && String_ctr[$default_locale]) {\r\n\t\tuse_default = TRUE;\r\n\t\treturn localize.call(this_val);\r\n\t}\r\n\r\n\treturn this_val;\r\n}\r\n;\r\n\r\nif (typeof XMLHttpRequest === undef_type && typeof ActiveXObject !== undef_type) {\r\n\tvar AXO = ActiveXObject;\r\n\t\r\n\tXHR = function () {\r\n\t\ttry {\r\n\t\t\treturn new AXO(\"Msxml2.XMLHTTP.6.0\");\r\n\t\t} catch (xhrEx1) {}\r\n\t\ttry {\r\n\t\t\treturn new AXO(\"Msxml2.XMLHTTP.3.0\");\r\n\t\t} catch (xhrEx2) {}\r\n\t\ttry {\r\n\t\t\treturn new AXO(\"Msxml2.XMLHTTP\");\r\n\t\t} catch (xhrEx3) {}\r\n\t\r\n\t\tthrow new Error(\"XMLHttpRequest not supported by this browser.\");\r\n\t};\r\n} else {\r\n\tXHR = XMLHttpRequest;\r\n}\r\n\r\nString_ctr[$default_locale] = String_ctr[$default_locale] || \"\";\r\nString_ctr[$locale] = nav && (nav.language || nav.userLanguage) || \"\";\r\n\r\nif (typeof document !== undef_type) {\r\n\tvar\r\n\t  elts = document.getElementsByTagName(\"link\")\r\n\t, i = elts.length\r\n\t, localization\r\n\t;\r\n\t\r\n\twhile (i--) {\r\n\t\tvar\r\n\t\t  elt = elts[i]\r\n\t\t, rel = (elt.getAttribute(\"rel\") || \"\")[$to_lowercase]().split(/\\s+/)\r\n\t\t;\r\n\t\t\r\n\t\tif (l10n_js_media_type.test(elt.type)) {\r\n\t\t\tif (array_index_of.call(rel, \"localizations\") !== -1) {\r\n\t\t\t\t// multiple localizations\r\n\t\t\t\tload(elt.getAttribute(\"href\"));\r\n\t\t\t} else if (array_index_of.call(rel, \"localization\") !== -1) {\r\n\t\t\t\t// single localization\r\n\t\t\t\tlocalization = {};\r\n\t\t\t\tlocalization[(elt.getAttribute(\"hreflang\") || \"\")[$to_lowercase]()] =\r\n\t\t\t\t\telt.getAttribute(\"href\");\r\n\t\t\t\tload(localization);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n\r\n}());\r\n"],"sourceRoot":""}