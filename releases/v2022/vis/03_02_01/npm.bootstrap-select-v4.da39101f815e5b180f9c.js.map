{"version":3,"sources":["webpack:///../node_modules/bootstrap-select-v4/dist/css/bootstrap-select.min.css?1b40","webpack:///../node_modules/bootstrap-select-v4/dist/js/bootstrap-select.js"],"names":[],"mappings":";;;;;;;;;AAAA,uC;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,QAAQ,IAA0C;AAClD;AACA,QAAQ,iCAAO,CAAC,0EAAQ,CAAC,mCAAE;AAC3B;AACA,SAAS;AAAA,oGAAC;AACV,KAAK,MAAM,EAON;AACL,CAAC;;AAED;AACA;;AAEA;AACA;AACA;AACA,6BAA6B;AAC7B,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;AACjB,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA,aAAa;AACb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,mCAAmC;AACnC;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,aAAa,yBAAyB;AACtC;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,mBAAmB,OAAO;AAC1B,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,4BAA4B;AAC7C,iBAAiB,uBAAuB;AACxC,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb;AACA;;;AAGA;AACA;AACA,uBAAuB;AACvB,sBAAsB;AACtB,sBAAsB;AACtB,wBAAwB;AACxB,wBAAwB;AACxB,wBAAwB;AACxB;;AAEA;AACA,kBAAkB;AAClB,iBAAiB;AACjB,iBAAiB;AACjB,mBAAmB;AACnB,mBAAmB;AACnB,mBAAmB;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,kDAAkD,EAAE;AACpD;AACA,8CAA8C,EAAE,oBAAoB,EAAE;AACtE,aAAa;AACb;AACA;AACA,qDAAqD,EAAE,+BAA+B,EAAE;AACxF,6DAA6D,EAAE,qCAAqC,EAAE;AACtG;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,qBAAqB;AACrB;;AAEA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6IAA6I;AAC7I;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wEAAwE;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA,iCAAiC;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA,0EAA0E,KAAE;;AAE5E,kDAAkD;AAClD;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA,gEAAgE;AAChE;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA,qBAAqB;AACrB;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mDAAmD,EAAE,8CAA8C,EAAE;AACrG;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yFAAyF;AACzF;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,4CAA4C;AAC5C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB,4CAA4C;AAC5C;;AAEA;;AAEA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,QAAQ;AAC/B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA,6CAA6C;AAC7C;AACA;;AAEA;AACA,aAAa;;AAEb;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,QAAQ;AAC/B,uBAAuB,OAAO;AAC9B;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA,qBAAqB;AACrB;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,6CAA6C;AAC7C;AACA;AACA;AACA;AACA,yBAAyB,OAAO;AAChC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA,gFAAgF,EAAE;AAClF,mFAAmF,EAAE;AACrF;AACA,+CAA+C,IAAI;AACnD;AACA;AACA,sEAAsE,IAAI;AAC1E,4EAA4E,IAAI;AAChF;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,yCAAyC;;AAEzC;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;;AAEjB;AACA;AACA,iBAAiB;;AAEjB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,yBAAyB;AACzB;AACA;;AAEA;AACA,oFAAoF,EAAE;AACtF;AACA;AACA,yBAAyB;AACzB;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA,iCAAiC;AACjC;AACA,iCAAiC;AACjC;AACA;AACA,6BAA6B;AAC7B;;AAEA;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;;AAEA;AACA,iBAAiB;AACjB;AACA;AACA,aAAa;;AAEb;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;;AAEA,+BAA+B,eAAe;AAC9C;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;;AAEA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA,iBAAiB;AACjB;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,qBAAqB;;AAErB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;;AAEb;AACA;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,gDAAgD,yDAAyD;AACzG,qDAAqD,wGAAwG;AAC7J;AACA,qBAAqB;AACrB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT,KAAK;;;AAGL,CAAC,G","file":"npm.bootstrap-select-v4.da39101f815e5b180f9c.js","sourcesContent":["// extracted by mini-css-extract-plugin","/*!\n * Bootstrap-select v1.12.5 (http://silviomoreto.github.io/bootstrap-select)\n *\n * Copyright 2013-2017 bootstrap-select\n * Licensed under MIT (https://github.com/silviomoreto/bootstrap-select/blob/master/LICENSE)\n */\n\n(function (root, factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module unless amdModuleId is set\n        define([\"jquery\"], function (a0) {\n            return (factory(a0));\n        });\n    } else if (typeof module === 'object' && module.exports) {\n        // Node. Does not work with strict CommonJS, but\n        // only CommonJS-like environments that support module.exports,\n        // like Node.\n        module.exports = factory(require(\"jquery\"));\n    } else {\n        factory(root[\"jQuery\"]);\n    }\n}(this, function (jQuery) {\n\n    (function ($) {\n        'use strict';\n\n        //<editor-fold desc=\"Shims\">\n        if (!String.prototype.includes) {\n            (function () {\n                'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n                var toString = {}.toString;\n                var defineProperty = (function () {\n                    // IE 8 only supports `Object.defineProperty` on DOM elements\n                    try {\n                        var object = {};\n                        var $defineProperty = Object.defineProperty;\n                        var result = $defineProperty(object, object, object) && $defineProperty;\n                    } catch (error) {\n                    }\n                    return result;\n                }());\n                var indexOf = ''.indexOf;\n                var includes = function (search) {\n                    if (this == null) {\n                        throw new TypeError();\n                    }\n                    var string = String(this);\n                    if (search && toString.call(search) == '[object RegExp]') {\n                        throw new TypeError();\n                    }\n                    var stringLength = string.length;\n                    var searchString = String(search);\n                    var searchLength = searchString.length;\n                    var position = arguments.length > 1 ? arguments[1] : undefined;\n                    // `ToInteger`\n                    var pos = position ? Number(position) : 0;\n                    if (pos != pos) { // better `isNaN`\n                        pos = 0;\n                    }\n                    var start = Math.min(Math.max(pos, 0), stringLength);\n                    // Avoid the `indexOf` call if no match is possible\n                    if (searchLength + start > stringLength) {\n                        return false;\n                    }\n                    return indexOf.call(string, searchString, pos) != -1;\n                };\n                if (defineProperty) {\n                    defineProperty(String.prototype, 'includes', {\n                        'value': includes,\n                        'configurable': true,\n                        'writable': true\n                    });\n                } else {\n                    String.prototype.includes = includes;\n                }\n            }());\n        }\n\n        if (!String.prototype.startsWith) {\n            (function () {\n                'use strict'; // needed to support `apply`/`call` with `undefined`/`null`\n                var defineProperty = (function () {\n                    // IE 8 only supports `Object.defineProperty` on DOM elements\n                    try {\n                        var object = {};\n                        var $defineProperty = Object.defineProperty;\n                        var result = $defineProperty(object, object, object) && $defineProperty;\n                    } catch (error) {\n                    }\n                    return result;\n                }());\n                var toString = {}.toString;\n                var startsWith = function (search) {\n                    if (this == null) {\n                        throw new TypeError();\n                    }\n                    var string = String(this);\n                    if (search && toString.call(search) == '[object RegExp]') {\n                        throw new TypeError();\n                    }\n                    var stringLength = string.length;\n                    var searchString = String(search);\n                    var searchLength = searchString.length;\n                    var position = arguments.length > 1 ? arguments[1] : undefined;\n                    // `ToInteger`\n                    var pos = position ? Number(position) : 0;\n                    if (pos != pos) { // better `isNaN`\n                        pos = 0;\n                    }\n                    var start = Math.min(Math.max(pos, 0), stringLength);\n                    // Avoid the `indexOf` call if no match is possible\n                    if (searchLength + start > stringLength) {\n                        return false;\n                    }\n                    var index = -1;\n                    while (++index < searchLength) {\n                        if (string.charCodeAt(start + index) != searchString.charCodeAt(index)) {\n                            return false;\n                        }\n                    }\n                    return true;\n                };\n                if (defineProperty) {\n                    defineProperty(String.prototype, 'startsWith', {\n                        'value': startsWith,\n                        'configurable': true,\n                        'writable': true\n                    });\n                } else {\n                    String.prototype.startsWith = startsWith;\n                }\n            }());\n        }\n\n        if (!Object.keys) {\n            Object.keys = function (o, // object\n                                    k, // key\n                                    r  // result array\n            ) {\n                // initialize object and result\n                r = [];\n                // iterate over object keys\n                for (k in o)\n                    // fill result array with non-prototypical keys\n                    r.hasOwnProperty.call(o, k) && r.push(k);\n                // return result\n                return r;\n            };\n        }\n\n        // set data-selected on select element if the value has been programmatically selected\n        // prior to initialization of bootstrap-select\n        // * consider removing or replacing an alternative method *\n        var valHooks = {\n            useDefault: false,\n            _set: $.valHooks.select.set\n        };\n\n        $.valHooks.select.set = function (elem, value) {\n            if (value && !valHooks.useDefault) $(elem).data('selected', true);\n\n            return valHooks._set.apply(this, arguments);\n        };\n\n        var changed_arguments = null;\n        $.fn.triggerNative = function (eventName) {\n            var el = this[0],\n                event;\n\n            if (el.dispatchEvent) { // for modern browsers & IE9+\n                if (typeof Event === 'function') {\n                    // For modern browsers\n                    event = new Event(eventName, {\n                        bubbles: true\n                    });\n                } else {\n                    // For IE since it doesn't support Event constructor\n                    event = document.createEvent('Event');\n                    event.initEvent(eventName, true, false);\n                }\n\n                el.dispatchEvent(event);\n            } else if (el.fireEvent) { // for IE8\n                event = document.createEventObject();\n                event.eventType = eventName;\n                el.fireEvent('on' + eventName, event);\n            } else {\n                // fall back to jQuery.trigger\n                this.trigger(eventName);\n            }\n        };\n        //</editor-fold>\n\n        // Case insensitive contains search\n        $.expr.pseudos.icontains = function (obj, index, meta) {\n            var $obj = $(obj).find('span.dropdown-item-inner');\n            var haystack = ($obj.data('tokens') || $obj.text()).toString().toUpperCase();\n            return haystack.includes(meta[3].toUpperCase());\n        };\n\n        // Case insensitive begins search\n        $.expr.pseudos.ibegins = function (obj, index, meta) {\n            var $obj = $(obj).find('span.dropdown-item-inner');\n            var haystack = ($obj.data('tokens') || $obj.text()).toString().toUpperCase();\n            return haystack.startsWith(meta[3].toUpperCase());\n        };\n\n        // Case and accent insensitive contains search\n        $.expr.pseudos.aicontains = function (obj, index, meta) {\n            var $obj = $(obj).find('span.dropdown-item-inner');\n            var haystack = ($obj.data('tokens') || $obj.data('normalizedText') || $obj.text()).toString().toUpperCase();\n            return haystack.includes(meta[3].toUpperCase());\n        };\n\n        // Case and accent insensitive begins search\n        $.expr.pseudos.aibegins = function (obj, index, meta) {\n            var $obj = $(obj).find('span.dropdown-item-inner');\n            var haystack = ($obj.data('tokens') || $obj.data('normalizedText') || $obj.text()).toString().toUpperCase();\n            return haystack.startsWith(meta[3].toUpperCase());\n        };\n\n        /**\n         * Remove all diatrics from the given text.\n         * @access private\n         * @param {String} text\n         * @returns {String}\n         */\n        function normalizeToBase(text) {\n            var rExps = [\n                {re: /[\\xC0-\\xC6]/g, ch: \"A\"},\n                {re: /[\\xE0-\\xE6]/g, ch: \"a\"},\n                {re: /[\\xC8-\\xCB]/g, ch: \"E\"},\n                {re: /[\\xE8-\\xEB]/g, ch: \"e\"},\n                {re: /[\\xCC-\\xCF]/g, ch: \"I\"},\n                {re: /[\\xEC-\\xEF]/g, ch: \"i\"},\n                {re: /[\\xD2-\\xD6]/g, ch: \"O\"},\n                {re: /[\\xF2-\\xF6]/g, ch: \"o\"},\n                {re: /[\\xD9-\\xDC]/g, ch: \"U\"},\n                {re: /[\\xF9-\\xFC]/g, ch: \"u\"},\n                {re: /[\\xC7-\\xE7]/g, ch: \"c\"},\n                {re: /[\\xD1]/g, ch: \"N\"},\n                {re: /[\\xF1]/g, ch: \"n\"}\n            ];\n            $.each(rExps, function () {\n                text = text ? text.replace(this.re, this.ch) : '';\n            });\n            return text;\n        }\n\n\n        // List of HTML entities for escaping.\n        var escapeMap = {\n            '&': '&amp;',\n            '<': '&lt;',\n            '>': '&gt;',\n            '\"': '&quot;',\n            \"'\": '&#x27;',\n            '`': '&#x60;'\n        };\n\n        var unescapeMap = {\n            '&amp;': '&',\n            '&lt;': '<',\n            '&gt;': '>',\n            '&quot;': '\"',\n            '&#x27;': \"'\",\n            '&#x60;': '`'\n        };\n\n        // Functions for escaping and unescaping strings to/from HTML interpolation.\n        var createEscaper = function (map) {\n            var escaper = function (match) {\n                return map[match];\n            };\n            // Regexes for identifying a key that needs to be escaped.\n            var source = '(?:' + Object.keys(map).join('|') + ')';\n            var testRegexp = RegExp(source);\n            var replaceRegexp = RegExp(source, 'g');\n            return function (string) {\n                string = string == null ? '' : '' + string;\n                return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;\n            };\n        };\n\n        var htmlEscape = createEscaper(escapeMap);\n        var htmlUnescape = createEscaper(unescapeMap);\n\n        var Selectpicker = function (element, options) {\n            // bootstrap-select has been initialized - revert valHooks.select.set back to its original function\n            if (!valHooks.useDefault) {\n                $.valHooks.select.set = valHooks._set;\n                valHooks.useDefault = true;\n            }\n\n            this.$element = $(element);\n            this.$newElement = null;\n            this.$button = null;\n            this.$menu = null;\n            this.$lis = null;\n            this.options = options;\n\n            // If we have no title yet, try to pull it from the html title attribute (jQuery doesnt' pick it up as it's not a\n            // data-attribute)\n            if (this.options.title === null) {\n                this.options.title = this.$element.attr('title');\n            }\n\n            // Format window padding\n            var winPad = this.options.windowPadding;\n            if (typeof winPad === 'number') {\n                this.options.windowPadding = [winPad, winPad, winPad, winPad];\n            }\n\n            //Expose public methods\n            this.val = Selectpicker.prototype.val;\n            this.render = Selectpicker.prototype.render;\n            this.refresh = Selectpicker.prototype.refresh;\n            this.setStyle = Selectpicker.prototype.setStyle;\n            this.selectAll = Selectpicker.prototype.selectAll;\n            this.deselectAll = Selectpicker.prototype.deselectAll;\n            this.destroy = Selectpicker.prototype.destroy;\n            this.remove = Selectpicker.prototype.remove;\n            this.show = Selectpicker.prototype.show;\n            this.hide = Selectpicker.prototype.hide;\n\n            this.init();\n        };\n\n        Selectpicker.VERSION = '1.12.2';\n\n        // part of this is duplicated in i18n/defaults-en_US.js. Make sure to update both.\n        Selectpicker.DEFAULTS = {\n            noneSelectedText: 'Nothing selected',\n            noneResultsText: 'No results matched {0}',\n            countSelectedText: function (numSelected, numTotal) {\n                return (numSelected == 1) ? \"{0} item selected\" : \"{0} items selected\";\n            },\n            maxOptionsText: function (numAll, numGroup) {\n                return [\n                    (numAll == 1) ? 'Limit reached ({n} item max)' : 'Limit reached ({n} items max)',\n                    (numGroup == 1) ? 'Group limit reached ({n} item max)' : 'Group limit reached ({n} items max)'\n                ];\n            },\n            selectAllText: 'Select All',\n            deselectAllText: 'Deselect All',\n            doneButton: false,\n            doneButtonText: 'Close',\n            multipleSeparator: ', ',\n            styleBase: 'btn',\n            style: 'btn-default btn-light', // bootstrap4: btn-default replaced by btn-light\n            size: 'auto',\n            title: null,\n            selectedTextFormat: 'values',\n            width: false,\n            container: false,\n            hideDisabled: false,\n            showSubtext: false,\n            showIcon: true,\n            showContent: true,\n            dropupAuto: true,\n            header: false,\n            liveSearch: false,\n            liveSearchPlaceholder: null,\n            liveSearchNormalize: false,\n            liveSearchStyle: 'contains',\n            actionsBox: false,\n            iconBase: 'fa',\n            tickIcon: 'fa-check',\n            showTick: false,\n            template: {\n                caret: '<span class=\"caret\"></span>'\n            },\n            maxOptions: false,\n            mobile: false,\n            selectOnTab: false,\n            dropdownAlignRight: false,\n            windowPadding: 0\n        };\n\n        Selectpicker.prototype = {\n\n            constructor: Selectpicker,\n\n            init: function () {\n                var that = this,\n                    id = this.$element.attr('id');\n\n                this.$element.addClass('bs-select-hidden');\n\n                // store originalIndex (key) and newIndex (value) in this.liObj for fast accessibility\n                // allows us to do this.$lis.eq(that.liObj[index]) instead of this.$lis.filter('[data-original-index=\"' + index + '\"]')\n                this.liObj = {};\n                this.multiple = this.$element.prop('multiple');\n                this.autofocus = this.$element.prop('autofocus');\n                this.$newElement = this.createView();\n                this.$element\n                    .after(this.$newElement)\n                    .appendTo(this.$newElement);\n                this.$button = this.$newElement.children('button');\n                this.$menu = this.$newElement.children('.dropdown-menu');\n                this.$menuInner = this.$menu.children('.inner');\n                this.$searchbox = this.$menu.find('input');\n\n                this.$element.removeClass('bs-select-hidden');\n\n                if (this.options.dropdownAlignRight === true) this.$menu.addClass('dropdown-menu-right');\n\n                if (typeof id !== 'undefined') {\n                    this.$button.attr('data-id', id);\n                    $('label[for=\"' + id + '\"]').click(function (e) {\n                        e.preventDefault();\n                        that.$button.focus();\n                    });\n                }\n\n                this.checkDisabled();\n                this.clickListener();\n                if (this.options.liveSearch) this.liveSearchListener();\n                this.render();\n                this.setStyle();\n                this.setWidth();\n                if (this.options.container) this.selectPosition();\n                this.$menu.data('this', this);\n                this.$newElement.data('this', this);\n                if (this.options.mobile) this.mobile();\n\n                this.$newElement.on({\n                    'hide.bs.dropdown': function (e) {\n                        that.$menuInner.attr('aria-expanded', false);\n                        that.$element.trigger('hide.bs.select', e);\n                    },\n                    'hidden.bs.dropdown': function (e) {\n                        that.$element.trigger('hidden.bs.select', e);\n                    },\n                    'show.bs.dropdown': function (e) {\n                        that.$menuInner.attr('aria-expanded', true);\n                        that.$element.trigger('show.bs.select', e);\n                    },\n                    'shown.bs.dropdown': function (e) {\n                        that.$element.trigger('shown.bs.select', e);\n                    }\n                });\n\n                if (that.$element[0].hasAttribute('required')) {\n                    this.$element.on('invalid', function () {\n                        that.$button\n                            .addClass('bs-invalid')\n                            .focus();\n\n                        that.$element.on({\n                            'focus.bs.select': function () {\n                                that.$button.focus();\n                                that.$element.off('focus.bs.select');\n                            },\n                            'shown.bs.select': function () {\n                                that.$element\n                                    .val(that.$element.val()) // set the value to hide the validation message in Chrome when menu is opened\n                                    .off('shown.bs.select');\n                            },\n                            'rendered.bs.select': function () {\n                                // if select is no longer invalid, remove the bs-invalid class\n                                if (this.validity.valid) that.$button.removeClass('bs-invalid');\n                                that.$element.off('rendered.bs.select');\n                            }\n                        });\n                    });\n                }\n\n                setTimeout(function () {\n                    that.$element.trigger('loaded.bs.select');\n                });\n            },\n\n            createDropdown: function () {\n                // Options\n                // If we are multiple or showTick option is set, then add the show-tick class\n                var showTick = (this.multiple || this.options.showTick) ? ' show-tick' : '',\n                    inputGroup = this.$element.parent().hasClass('input-group') ? ' input-group-btn' : '',\n                    autofocus = this.autofocus ? ' autofocus' : '';\n                // Elements\n                var header = this.options.header ? '<div class=\"popover-title\"><button type=\"button\" class=\"close\" aria-hidden=\"true\">&times;</button>' + this.options.header + '</div>' : '';\n                var searchbox = this.options.liveSearch ?\n                    '<div class=\"bs-searchbox\">' +\n                    '<input type=\"text\" class=\"form-control\" autocomplete=\"off\"' +\n                    (null === this.options.liveSearchPlaceholder ? '' : ' placeholder=\"' + htmlEscape(this.options.liveSearchPlaceholder) + '\"') + ' role=\"textbox\" aria-label=\"Search\">' +\n                    '</div>'\n                    : '';\n                var actionsbox = this.multiple && this.options.actionsBox ?\n                    '<div class=\"bs-actionsbox\">' +\n                    '<div class=\"btn-group btn-group-sm btn-block\">' +\n                    '<button type=\"button\" class=\"actions-btn bs-select-all btn btn-default btn-light\">' +\n                    this.options.selectAllText +\n                    '</button>' +\n                    '<button type=\"button\" class=\"actions-btn bs-deselect-all btn btn-default btn-light\">' +\n                    this.options.deselectAllText +\n                    '</button>' +\n                    '</div>' +\n                    '</div>'\n                    : '';\n                var donebutton = this.multiple && this.options.doneButton ?\n                    '<div class=\"bs-donebutton\">' +\n                    '<div class=\"btn-group btn-block\">' +\n                    '<button type=\"button\" class=\"btn btn-sm btn-default btn-light\">' +\n                    this.options.doneButtonText +\n                    '</button>' +\n                    '</div>' +\n                    '</div>'\n                    : '';\n                var drop =\n                    '<div class=\"btn-group bootstrap-select' + showTick + inputGroup + '\">' +\n                    '<button type=\"button\" class=\"' + this.options.styleBase + ' dropdown-toggle\" data-toggle=\"dropdown\"' + autofocus + ' role=\"button\">' +\n                    '<span class=\"filter-option pull-left\"></span>&nbsp;' +\n                    '<span class=\"bs-caret\">' +\n                    this.options.template.caret +\n                    '</span>' +\n                    '</button>' +\n                    '<div class=\"dropdown-menu open\" role=\"combobox\">' +\n                    header +\n                    searchbox +\n                    actionsbox +\n                    '<div class=\"dropdown-menu inner\" role=\"listbox\" aria-expanded=\"false\">' +\n                    '</div>' +\n                    donebutton +\n                    '</div>' +\n                    '</div>';\n\n                return $(drop);\n            },\n\n            createView: function () {\n                var $drop = this.createDropdown(),\n                    li = this.createLi();\n\n                $drop.find('div.inner')[0].innerHTML = li;\n                return $drop;\n            },\n\n            reloadLi: function () {\n                // rebuild\n                var li = this.createLi();\n                this.$menuInner[0].innerHTML = li;\n            },\n\n            createLi: function () {\n                var that = this,\n                    _li = [],\n                    optID = 0,\n                    titleOption = document.createElement('option'),\n                    liIndex = -1; // increment liIndex whenever a new <li> element is created to ensure liObj is correct\n\n                // Helper functions\n                /**\n                 * @param content\n                 * @param [index]\n                 * @param [classes]\n                 * @param [optgroup]\n                 * @returns {string}\n                 */\n                var generateLI = function (content, index, classes, optgroup) {\n                    classes = \"dropdown-item \" + (classes || \"\");\n                    return '<a' +\n                        ((typeof classes !== 'undefined' && '' !== classes) ? ' class=\"' + classes + '\"' : '') +\n                        ((typeof index !== 'undefined' && null !== index) ? ' data-original-index=\"' + index + '\"' : '') +\n                        ((typeof optgroup !== 'undefined' && null !== optgroup) ? 'data-optgroup=\"' + optgroup + '\"' : '') +\n                        '>' + content + '</a>';\n                };\n\n                /**\n                 * @param text\n                 * @param [classes]\n                 * @param [inline]\n                 * @param [tokens]\n                 * @returns {string}\n                 */\n                var generateA = function (text, classes, inline, tokens) {\n                    // support bootstrap v4: http://v4-alpha.getbootstrap.com/components/dropdowns/#single-button-dropdowns\n                    classes = \"dropdown-item-inner \" + (classes || \"\");\n                    return '<span tabindex=\"0\"' +\n                        (typeof classes !== 'undefined' ? ' class=\"' + classes + '\"' : '') +\n                        (inline ? ' style=\"' + inline + '\"' : '') +\n                        (that.options.liveSearchNormalize ? ' data-normalized-text=\"' + normalizeToBase(htmlEscape($(text).html())) + '\"' : '') +\n                        (typeof tokens !== 'undefined' || tokens !== null ? ' data-tokens=\"' + tokens + '\"' : '') +\n                        ' role=\"option\">' + text +\n                        '<span class=\"' + that.options.iconBase + ' ' + that.options.tickIcon + ' check-mark\"></span>' +\n                        '</span>';\n                };\n\n                if (this.options.title && !this.multiple) {\n                    // this option doesn't create a new <li> element, but does add a new option, so liIndex is decreased\n                    // since liObj is recalculated on every refresh, liIndex needs to be decreased even if the titleOption is already appended\n                    liIndex--;\n\n                    if (!this.$element.find('.bs-title-option').length) {\n                        // Use native JS to prepend option (faster)\n                        var element = this.$element[0];\n                        titleOption.className = 'bs-title-option';\n                        titleOption.innerHTML = this.options.title;\n                        titleOption.value = '';\n                        element.insertBefore(titleOption, element.firstChild);\n                        // Check if selected or data-selected attribute is already set on an option. If not, select the titleOption option.\n                        // the selected item may have been changed by user or programmatically before the bootstrap select plugin runs,\n                        // if so, the select will have the data-selected attribute\n                        var $opt = $(element.options[element.selectedIndex]);\n                        if ($opt.attr('selected') === undefined && this.$element.data('selected') === undefined) {\n                            titleOption.selected = true;\n                        }\n                    }\n                }\n\n                var $selectOptions = this.$element.find('option');\n\n                $selectOptions.each(function (index) {\n                    var $this = $(this);\n\n                    liIndex++;\n\n                    if ($this.hasClass('bs-title-option')) return;\n\n                    // Get the class and text for the option\n                    var optionClass = this.className || '',\n                        inline = htmlEscape(this.style.cssText),\n                        text = $this.data('content') ? $this.data('content') : $this.html(),\n                        tokens = $this.data('tokens') ? $this.data('tokens') : null,\n                        subtext = typeof $this.data('subtext') !== 'undefined' ? '<small class=\"text-muted\">' + $this.data('subtext') + '</small>' : '',\n                        icon = typeof $this.data('icon') !== 'undefined' ? '<span class=\"' + that.options.iconBase + ' ' + $this.data('icon') + '\"></span> ' : '',\n                        $parent = $this.parent(),\n                        isOptgroup = $parent[0].tagName === 'OPTGROUP',\n                        isOptgroupDisabled = isOptgroup && $parent[0].disabled,\n                        isDisabled = this.disabled || isOptgroupDisabled,\n                        prevHiddenIndex;\n\n                    if (icon !== '' && isDisabled) {\n                        icon = '<span>' + icon + '</span>';\n                    }\n\n                    if (that.options.hideDisabled && (isDisabled && !isOptgroup || isOptgroupDisabled)) {\n                        // set prevHiddenIndex - the index of the first hidden option in a group of hidden options\n                        // used to determine whether or not a divider should be placed after an optgroup if there are\n                        // hidden options between the optgroup and the first visible option\n                        prevHiddenIndex = $this.data('prevHiddenIndex');\n                        $this.next().data('prevHiddenIndex', (prevHiddenIndex !== undefined ? prevHiddenIndex : index));\n\n                        liIndex--;\n                        return;\n                    }\n\n                    if (!$this.data('content')) {\n                        // Prepend any icon and append any subtext to the main text.\n                        text = icon + '<span class=\"text\">' + text + subtext + '</span>';\n                    }\n\n                    if (isOptgroup && $this.data('divider') !== true) {\n                        if (that.options.hideDisabled && isDisabled) {\n                            if ($parent.data('allOptionsDisabled') === undefined) {\n                                var $options = $parent.children();\n                                $parent.data('allOptionsDisabled', $options.filter(':disabled').length === $options.length);\n                            }\n\n                            if ($parent.data('allOptionsDisabled')) {\n                                liIndex--;\n                                return;\n                            }\n                        }\n\n                        var optGroupClass = ' ' + $parent[0].className || '';\n\n                        if ($this.index() === 0) { // Is it the first option of the optgroup?\n                            optID += 1;\n\n                            // Get the opt group label\n                            var label = $parent[0].label,\n                                labelSubtext = typeof $parent.data('subtext') !== 'undefined' ? '<small class=\"text-muted\">' + $parent.data('subtext') + '</small>' : '',\n                                labelIcon = $parent.data('icon') ? '<span class=\"' + that.options.iconBase + ' ' + $parent.data('icon') + '\"></span> ' : '';\n\n                            label = labelIcon + '<span class=\"text\">' + htmlEscape(label) + labelSubtext + '</span>';\n\n                            if (index !== 0 && _li.length > 0) { // Is it NOT the first option of the select && are there elements in the dropdown?\n                                liIndex++;\n                                _li.push(generateLI('', null, 'divider', optID + 'div'));\n                            }\n                            liIndex++;\n                            _li.push(generateLI(label, null, 'dropdown-header' + optGroupClass, optID));\n                        }\n\n                        if (that.options.hideDisabled && isDisabled) {\n                            liIndex--;\n                            return;\n                        }\n\n                        _li.push(generateLI(generateA(text, 'opt ' + optionClass + optGroupClass, inline, tokens), index, '', optID));\n                    } else if ($this.data('divider') === true) {\n                        _li.push(generateLI('', index, 'divider'));\n                    } else if ($this.data('hidden') === true) {\n                        // set prevHiddenIndex - the index of the first hidden option in a group of hidden options\n                        // used to determine whether or not a divider should be placed after an optgroup if there are\n                        // hidden options between the optgroup and the first visible option\n                        prevHiddenIndex = $this.data('prevHiddenIndex');\n                        $this.next().data('prevHiddenIndex', (prevHiddenIndex !== undefined ? prevHiddenIndex : index));\n\n                        _li.push(generateLI(generateA(text, optionClass, inline, tokens), index, 'hidden is-hidden'));\n                    } else {\n                        var showDivider = this.previousElementSibling && this.previousElementSibling.tagName === 'OPTGROUP';\n\n                        // if previous element is not an optgroup and hideDisabled is true\n                        if (!showDivider && that.options.hideDisabled) {\n                            prevHiddenIndex = $this.data('prevHiddenIndex');\n\n                            if (prevHiddenIndex !== undefined) {\n                                // select the element **before** the first hidden element in the group\n                                var prevHidden = $selectOptions.eq(prevHiddenIndex)[0].previousElementSibling;\n\n                                if (prevHidden && prevHidden.tagName === 'OPTGROUP' && !prevHidden.disabled) {\n                                    showDivider = true;\n                                }\n                            }\n                        }\n\n                        if (showDivider) {\n                            liIndex++;\n                            _li.push(generateLI('', null, 'divider', optID + 'div'));\n                        }\n                        _li.push(generateLI(generateA(text, optionClass, inline, tokens), index));\n                    }\n\n                    that.liObj[index] = liIndex;\n                });\n\n                //If we are not multiple, we don't have a selected item, and we don't have a title, select the first element so something is set in the button\n                if (!this.multiple && this.$element.find('option:selected').length === 0 && !this.options.title) {\n                    this.$element.find('option').eq(0).prop('selected', true).attr('selected', 'selected');\n                }\n\n                return _li.join('');\n            },\n\n            findLis: function () {\n                if (this.$lis == null) this.$lis = this.$menu.find('a');\n                return this.$lis;\n            },\n\n            /**\n             * @param [updateLi] defaults to true\n             */\n            render: function (updateLi) {\n                var that = this,\n                    notDisabled,\n                    $selectOptions = this.$element.find('option');\n\n                //Update the LI to match the SELECT\n                if (updateLi !== false) {\n                    $selectOptions.each(function (index) {\n                        var $lis = that.findLis().eq(that.liObj[index]);\n\n                        that.setDisabled(index, this.disabled || this.parentNode.tagName === 'OPTGROUP' && this.parentNode.disabled, $lis);\n                        that.setSelected(index, this.selected, $lis);\n                    });\n                }\n\n                this.togglePlaceholder();\n\n                this.tabIndex();\n\n                var selectedItems = $selectOptions.map(function () {\n                    if (this.selected) {\n                        if (that.options.hideDisabled && (this.disabled || this.parentNode.tagName === 'OPTGROUP' && this.parentNode.disabled)) return;\n\n                        var $this = $(this),\n                            icon = $this.data('icon') && that.options.showIcon ? '<i class=\"' + that.options.iconBase + ' ' + $this.data('icon') + '\"></i> ' : '',\n                            subtext;\n\n                        if (that.options.showSubtext && $this.data('subtext') && !that.multiple) {\n                            subtext = ' <small class=\"text-muted\">' + $this.data('subtext') + '</small>';\n                        } else {\n                            subtext = '';\n                        }\n                        if (typeof $this.attr('title') !== 'undefined') {\n                            return $this.attr('title');\n                        } else if ($this.data('content') && that.options.showContent) {\n                            return $this.data('content').toString();\n                        } else {\n                            return icon + $this.html() + subtext;\n                        }\n                    }\n                }).toArray();\n\n                //Fixes issue in IE10 occurring when no default option is selected and at least one option is disabled\n                //Convert all the values into a comma delimited string\n                var title = !this.multiple ? selectedItems[0] : selectedItems.join(this.options.multipleSeparator);\n\n                //If this is multi select, and the selectText type is count, the show 1 of 2 selected etc..\n                if (this.multiple && this.options.selectedTextFormat.indexOf('count') > -1) {\n                    var max = this.options.selectedTextFormat.split('>');\n                    if ((max.length > 1 && selectedItems.length > max[1]) || (max.length == 1 && selectedItems.length >= 2)) {\n                        notDisabled = this.options.hideDisabled ? ', [disabled]' : '';\n                        var totalCount = $selectOptions.not('[data-divider=\"true\"], [data-hidden=\"true\"]' + notDisabled).length,\n                            tr8nText = (typeof this.options.countSelectedText === 'function') ? this.options.countSelectedText(selectedItems.length, totalCount) : this.options.countSelectedText;\n                        title = tr8nText.replace('{0}', selectedItems.length.toString()).replace('{1}', totalCount.toString());\n                    }\n                }\n\n                if (this.options.title == undefined) {\n                    this.options.title = this.$element.attr('title');\n                }\n\n                if (this.options.selectedTextFormat == 'static') {\n                    title = this.options.title;\n                }\n\n                //If we dont have a title, then use the default, or if nothing is set at all, use the not selected text\n                if (!title) {\n                    title = typeof this.options.title !== 'undefined' ? this.options.title : this.options.noneSelectedText;\n                }\n\n                //strip all HTML tags and trim the result, then unescape any escaped tags\n                this.$button.attr('title', htmlUnescape($.trim(title.replace(/<[^>]*>?/g, ''))));\n                this.$button.children('.filter-option').html(title);\n\n                this.$element.trigger('rendered.bs.select');\n            },\n\n            /**\n             * @param [style]\n             * @param [status]\n             */\n            setStyle: function (style, status) {\n                if (this.$element.attr('class')) {\n                    this.$newElement.addClass(this.$element.attr('class').replace(/selectpicker|mobile-device|bs-select-hidden|validate\\[.*\\]/gi, ''));\n                }\n\n                var buttonClass = style ? style : this.options.style;\n\n                if (status == 'add') {\n                    this.$button.addClass(buttonClass);\n                } else if (status == 'remove') {\n                    this.$button.removeClass(buttonClass);\n                } else {\n                    this.$button.removeClass(this.options.style);\n                    this.$button.addClass(buttonClass);\n                }\n            },\n\n            liHeight: function (refresh) {\n                if (!refresh && (this.options.size === false || this.sizeInfo)) return;\n\n                var newElement = document.createElement('div'),\n                    menu = document.createElement('div'),\n                    menuInner = document.createElement('ul'),\n                    divider = document.createElement('a'),\n                    li = document.createElement('a'),\n                    a = document.createElement('span'),\n                    text = document.createElement('span'),\n                    header = this.options.header && this.$menu.find('.popover-title').length > 0 ? this.$menu.find('.popover-title')[0].cloneNode(true) : null,\n                    search = this.options.liveSearch ? document.createElement('div') : null,\n                    actions = this.options.actionsBox && this.multiple && this.$menu.find('.bs-actionsbox').length > 0 ? this.$menu.find('.bs-actionsbox')[0].cloneNode(true) : null,\n                    doneButton = this.options.doneButton && this.multiple && this.$menu.find('.bs-donebutton').length > 0 ? this.$menu.find('.bs-donebutton')[0].cloneNode(true) : null;\n\n                text.className = 'text';\n                newElement.className = this.$menu[0].parentNode.className + ' show open'; // bootstrap 4 requires show instead of open\n                menu.className = 'dropdown-menu open show';\n                menuInner.className = 'dropdown-menu inner';\n                divider.className = 'divider';\n                a.className = 'dropdown-item-inner';\n\n                text.appendChild(document.createTextNode('Inner text'));\n\n                a.appendChild(text);\n                li.appendChild(a);\n                menuInner.appendChild(li);\n                menuInner.appendChild(divider);\n                if (header) menu.appendChild(header);\n                if (search) {\n                    var input = document.createElement('input');\n                    search.className = 'bs-searchbox';\n                    input.className = 'form-control';\n                    search.appendChild(input);\n                    menu.appendChild(search);\n                }\n                if (actions) menu.appendChild(actions);\n                menu.appendChild(menuInner);\n                if (doneButton) menu.appendChild(doneButton);\n                newElement.appendChild(menu);\n\n                document.body.appendChild(newElement);\n\n                var liHeight = a.offsetHeight,\n                    headerHeight = header ? header.offsetHeight : 0,\n                    searchHeight = search ? search.offsetHeight : 0,\n                    actionsHeight = actions ? actions.offsetHeight : 0,\n                    doneButtonHeight = doneButton ? doneButton.offsetHeight : 0,\n                    dividerHeight = $(divider).outerHeight(true),\n                    // fall back to jQuery if getComputedStyle is not supported\n                    menuStyle = typeof getComputedStyle === 'function' ? getComputedStyle(menu) : false,\n                    $menu = menuStyle ? null : $(menu),\n                    menuPadding = {\n                        vert: parseInt(menuStyle ? menuStyle.paddingTop : $menu.css('paddingTop')) +\n                        parseInt(menuStyle ? menuStyle.paddingBottom : $menu.css('paddingBottom')) +\n                        parseInt(menuStyle ? menuStyle.borderTopWidth : $menu.css('borderTopWidth')) +\n                        parseInt(menuStyle ? menuStyle.borderBottomWidth : $menu.css('borderBottomWidth')),\n                        horiz: parseInt(menuStyle ? menuStyle.paddingLeft : $menu.css('paddingLeft')) +\n                        parseInt(menuStyle ? menuStyle.paddingRight : $menu.css('paddingRight')) +\n                        parseInt(menuStyle ? menuStyle.borderLeftWidth : $menu.css('borderLeftWidth')) +\n                        parseInt(menuStyle ? menuStyle.borderRightWidth : $menu.css('borderRightWidth'))\n                    },\n                    menuExtras = {\n                        vert: menuPadding.vert +\n                        parseInt(menuStyle ? menuStyle.marginTop : $menu.css('marginTop')) +\n                        parseInt(menuStyle ? menuStyle.marginBottom : $menu.css('marginBottom')) + 2,\n                        horiz: menuPadding.horiz +\n                        parseInt(menuStyle ? menuStyle.marginLeft : $menu.css('marginLeft')) +\n                        parseInt(menuStyle ? menuStyle.marginRight : $menu.css('marginRight')) + 2\n                    }\n\n                document.body.removeChild(newElement);\n\n                this.sizeInfo = {\n                    liHeight: liHeight,\n                    headerHeight: headerHeight,\n                    searchHeight: searchHeight,\n                    actionsHeight: actionsHeight,\n                    doneButtonHeight: doneButtonHeight,\n                    dividerHeight: dividerHeight,\n                    menuPadding: menuPadding,\n                    menuExtras: menuExtras\n                };\n            },\n\n            setSize: function () {\n                this.findLis();\n                this.liHeight();\n\n                if (this.options.header) this.$menu.css('padding-top', 0);\n                if (this.options.size === false) return;\n\n                var that = this,\n                    $menu = this.$menu,\n                    $menuInner = this.$menuInner,\n                    $window = $(window),\n                    selectHeight = this.$newElement[0].offsetHeight,\n                    selectWidth = this.$newElement[0].offsetWidth,\n                    liHeight = this.sizeInfo['liHeight'],\n                    headerHeight = this.sizeInfo['headerHeight'],\n                    searchHeight = this.sizeInfo['searchHeight'],\n                    actionsHeight = this.sizeInfo['actionsHeight'],\n                    doneButtonHeight = this.sizeInfo['doneButtonHeight'],\n                    divHeight = this.sizeInfo['dividerHeight'],\n                    menuPadding = this.sizeInfo['menuPadding'],\n                    menuExtras = this.sizeInfo['menuExtras'],\n                    notDisabled = this.options.hideDisabled ? '.disabled' : '',\n                    menuHeight,\n                    menuWidth,\n                    getHeight,\n                    getWidth,\n                    selectOffsetTop,\n                    selectOffsetBot,\n                    selectOffsetLeft,\n                    selectOffsetRight,\n                    getPos = function () {\n                        var pos = that.$newElement.offset(),\n                            $container = $(that.options.container),\n                            containerPos;\n\n                        if (that.options.container && !$container.is('body')) {\n                            containerPos = $container.offset();\n                            containerPos.top += parseInt($container.css('borderTopWidth'));\n                            containerPos.left += parseInt($container.css('borderLeftWidth'));\n                        } else {\n                            containerPos = {top: 0, left: 0};\n                        }\n\n                        var winPad = that.options.windowPadding;\n                        selectOffsetTop = pos.top - containerPos.top - $window.scrollTop();\n                        selectOffsetBot = $window.height() - selectOffsetTop - selectHeight - containerPos.top - winPad[2];\n                        selectOffsetLeft = pos.left - containerPos.left - $window.scrollLeft();\n                        selectOffsetRight = $window.width() - selectOffsetLeft - selectWidth - containerPos.left - winPad[1];\n                        selectOffsetTop -= winPad[0];\n                        selectOffsetLeft -= winPad[3];\n                    };\n\n                getPos();\n\n                if (this.options.size === 'auto') {\n                    var getSize = function () {\n                        var minHeight,\n                            hasClass = function (className, include) {\n                                return function (element) {\n                                    if (include) {\n                                        return (element.classList ? element.classList.contains(className) : $(element).hasClass(className));\n                                    } else {\n                                        return !(element.classList ? element.classList.contains(className) : $(element).hasClass(className));\n                                    }\n                                };\n                            },\n                            lis = that.$menuInner[0].getElementsByTagName('a'),\n                            lisVisible = Array.prototype.filter ? Array.prototype.filter.call(lis, hasClass('hidden', false)) : that.$lis.not('.hidden'),\n                            optGroup = Array.prototype.filter ? Array.prototype.filter.call(lisVisible, hasClass('dropdown-header', true)) : lisVisible.filter('.dropdown-header');\n\n                        getPos();\n                        menuHeight = selectOffsetBot - menuExtras.vert;\n                        menuWidth = selectOffsetRight - menuExtras.horiz;\n\n                        if (that.options.container) {\n                            if (!$menu.data('height')) $menu.data('height', $menu.height());\n                            getHeight = $menu.data('height');\n\n                            if (!$menu.data('width')) $menu.data('width', $menu.width());\n                            getWidth = $menu.data('width');\n                        } else {\n                            getHeight = $menu.height();\n                            getWidth = $menu.width();\n                        }\n\n                        if (that.options.dropupAuto) {\n                            that.$newElement.toggleClass('dropup', selectOffsetTop > selectOffsetBot && (menuHeight - menuExtras.vert) < getHeight);\n                        }\n\n                        if (that.$newElement.hasClass('dropup')) {\n                            menuHeight = selectOffsetTop - menuExtras.vert;\n                        }\n\n                        if (that.options.dropdownAlignRight === 'auto') {\n                            $menu.toggleClass('dropdown-menu-right', selectOffsetLeft > selectOffsetRight && (menuWidth - menuExtras.horiz) < (getWidth - selectWidth));\n                        }\n\n                        if ((lisVisible.length + optGroup.length) > 3) {\n                            minHeight = liHeight * 3 + menuExtras.vert - 2;\n                        } else {\n                            minHeight = 0;\n                        }\n\n                        $menu.css({\n                            'max-height': menuHeight + 'px',\n                            'overflow': 'hidden',\n                            'min-height': minHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight + 'px'\n                        });\n                        $menuInner.css({\n                            'max-height': menuHeight - headerHeight - searchHeight - actionsHeight - doneButtonHeight - menuPadding.vert + 'px',\n                            'overflow-y': 'auto',\n                            'min-height': Math.max(minHeight - menuPadding.vert, 0) + 'px'\n                        });\n                    };\n                    getSize();\n                    this.$searchbox.off('input.getSize propertychange.getSize').on('input.getSize propertychange.getSize', getSize);\n                    $window.off('resize.getSize scroll.getSize').on('resize.getSize scroll.getSize', getSize);\n                } else if (this.options.size && this.options.size != 'auto' && this.$lis.not(notDisabled).length > this.options.size) {\n                    var optIndex = this.$lis.not('.divider').not(notDisabled).children().slice(0, this.options.size).last().parent().index(),\n                        divLength = this.$lis.slice(0, optIndex + 1).filter('.divider').length;\n                    menuHeight = liHeight * this.options.size + divLength * divHeight + menuPadding.vert;\n\n                    if (that.options.container) {\n                        if (!$menu.data('height')) $menu.data('height', $menu.height());\n                        getHeight = $menu.data('height');\n                    } else {\n                        getHeight = $menu.height();\n                    }\n\n                    if (that.options.dropupAuto) {\n                        //noinspection JSUnusedAssignment\n                        this.$newElement.toggleClass('dropup', selectOffsetTop > selectOffsetBot && (menuHeight - menuExtras.vert) < getHeight);\n                    }\n                    $menu.css({\n                        'max-height': menuHeight + headerHeight + searchHeight + actionsHeight + doneButtonHeight + 'px',\n                        'overflow': 'hidden',\n                        'min-height': ''\n                    });\n                    $menuInner.css({\n                        'max-height': menuHeight - menuPadding.vert + 'px',\n                        'overflow-y': 'auto',\n                        'min-height': ''\n                    });\n                }\n            },\n\n            setWidth: function () {\n                if (this.options.width === 'auto') {\n                    this.$menu.css('min-width', '0');\n\n                    // Get correct width if element is hidden\n                    var $selectClone = this.$menu.parent().clone().appendTo('body'),\n                        $selectClone2 = this.options.container ? this.$newElement.clone().appendTo('body') : $selectClone,\n                        ulWidth = $selectClone.children('.dropdown-menu').outerWidth(),\n                        btnWidth = $selectClone2.css('width', 'auto').children('button').outerWidth();\n\n                    $selectClone.remove();\n                    $selectClone2.remove();\n\n                    // Set width to whatever's larger, button title or longest option\n                    this.$newElement.css('width', Math.max(ulWidth, btnWidth) + 'px');\n                } else if (this.options.width === 'fit') {\n                    // Remove inline min-width so width can be changed from 'auto'\n                    this.$menu.css('min-width', '');\n                    this.$newElement.css('width', '').addClass('fit-width');\n                } else if (this.options.width) {\n                    // Remove inline min-width so width can be changed from 'auto'\n                    this.$menu.css('min-width', '');\n                    this.$newElement.css('width', this.options.width);\n                } else {\n                    // Remove inline min-width/width so width can be changed\n                    this.$menu.css('min-width', '');\n                    this.$newElement.css('width', '');\n                }\n                // Remove fit-width class if width is changed programmatically\n                if (this.$newElement.hasClass('fit-width') && this.options.width !== 'fit') {\n                    this.$newElement.removeClass('fit-width');\n                }\n            },\n\n            selectPosition: function () {\n                this.$bsContainer = $('<div class=\"bs-container\" />');\n\n                var that = this,\n                    $container = $(this.options.container),\n                    pos,\n                    containerPos,\n                    actualHeight,\n                    getPlacement = function ($element) {\n                        that.$bsContainer.addClass($element.attr('class').replace(/form-control|fit-width/gi, '')).toggleClass('dropup', $element.hasClass('dropup'));\n                        pos = $element.offset();\n\n                        if (!$container.is('body')) {\n                            containerPos = $container.offset();\n                            containerPos.top += parseInt($container.css('borderTopWidth')) - $container.scrollTop();\n                            containerPos.left += parseInt($container.css('borderLeftWidth')) - $container.scrollLeft();\n                        } else {\n                            containerPos = {top: 0, left: 0};\n                        }\n\n                        actualHeight = $element.hasClass('dropup') ? 0 : $element[0].offsetHeight;\n\n                        that.$bsContainer.css({\n                            'top': pos.top - containerPos.top + actualHeight,\n                            'left': pos.left - containerPos.left,\n                            'width': $element[0].offsetWidth\n                        });\n                    };\n\n                this.$button.on('click', function () {\n                    var $this = $(this);\n\n                    if (that.isDisabled()) {\n                        return;\n                    }\n\n                    getPlacement(that.$newElement);\n\n                    that.$bsContainer\n                        .appendTo(that.options.container)\n                        .toggleClass('open', !$this.hasClass('open'))\n                        .append(that.$menu);\n                });\n\n                $(window).on('resize scroll', function () {\n                    getPlacement(that.$newElement);\n                });\n\n                this.$element.on('hide.bs.select', function () {\n                    that.$menu.data('height', that.$menu.height());\n                    that.$bsContainer.detach();\n                });\n            },\n\n            /**\n             * @param {number} index - the index of the option that is being changed\n             * @param {boolean} selected - true if the option is being selected, false if being deselected\n             * @param {JQuery} $lis - the 'li' element that is being modified\n             */\n            setSelected: function (index, selected, $lis) {\n                if (!$lis) {\n                    this.togglePlaceholder(); // check if setSelected is being called by changing the value of the select\n                    $lis = this.findLis().eq(this.liObj[index]);\n                }\n\n                $lis.toggleClass('selected', selected).find('span.dropdown-item-inner').attr('aria-selected', selected);\n            },\n\n            /**\n             * @param {number} index - the index of the option that is being disabled\n             * @param {boolean} disabled - true if the option is being disabled, false if being enabled\n             * @param {JQuery} $lis - the 'li' element that is being modified\n             */\n            setDisabled: function (index, disabled, $lis) {\n                if (!$lis) {\n                    $lis = this.findLis().eq(this.liObj[index]);\n                }\n\n                if (disabled) {\n                    $lis.addClass('disabled').children('span.dropdown-item-inner').attr('href', '#').attr('tabindex', -1).attr('aria-disabled', true);\n                } else {\n                    $lis.removeClass('disabled').children('span.dropdown-item-inner').removeAttr('href').attr('tabindex', 0).attr('aria-disabled', false);\n                }\n            },\n\n            isDisabled: function () {\n                return this.$element[0].disabled;\n            },\n\n            checkDisabled: function () {\n                var that = this;\n\n                if (this.isDisabled()) {\n                    this.$newElement.addClass('disabled');\n                    this.$button.addClass('disabled').attr('tabindex', -1).attr('aria-disabled', true);\n                } else {\n                    if (this.$button.hasClass('disabled')) {\n                        this.$newElement.removeClass('disabled');\n                        this.$button.removeClass('disabled').attr('aria-disabled', false);\n                    }\n\n                    if (this.$button.attr('tabindex') == -1 && !this.$element.data('tabindex')) {\n                        this.$button.removeAttr('tabindex');\n                    }\n                }\n\n                this.$button.click(function () {\n                    return !that.isDisabled();\n                });\n            },\n\n            togglePlaceholder: function () {\n                var value = this.$element.val();\n                this.$button.toggleClass('bs-placeholder', value === null || value === '' || (value.constructor === Array && value.length === 0));\n            },\n\n            tabIndex: function () {\n                if (this.$element.data('tabindex') !== this.$element.attr('tabindex') &&\n                    (this.$element.attr('tabindex') !== -98 && this.$element.attr('tabindex') !== '-98')) {\n                    this.$element.data('tabindex', this.$element.attr('tabindex'));\n                    this.$button.attr('tabindex', this.$element.data('tabindex'));\n                }\n\n                this.$element.attr('tabindex', -98);\n            },\n\n            clickListener: function () {\n                var that = this,\n                    $document = $(document);\n\n                $document.data('spaceSelect', false);\n\n                this.$button.on('keyup', function (e) {\n                    if (/(32)/.test(e.keyCode.toString(10)) && $document.data('spaceSelect')) {\n                        e.preventDefault();\n                        $document.data('spaceSelect', false);\n                    }\n                });\n\n                this.$button.on('click', function () {\n                    that.setSize();\n                });\n\n                this.$element.on('shown.bs.select', function () {\n                    if (!that.options.liveSearch && !that.multiple) {\n                        that.$menuInner.find('.selected a').focus();\n                    } else if (!that.multiple) {\n                        var selectedIndex = that.liObj[that.$element[0].selectedIndex];\n\n                        if (typeof selectedIndex !== 'number' || that.options.size === false) return;\n\n                        // scroll to selected option\n                        var offset = that.$lis.eq(selectedIndex)[0].offsetTop - that.$menuInner[0].offsetTop;\n                        offset = offset - that.$menuInner[0].offsetHeight / 2 + that.sizeInfo.liHeight / 2;\n                        that.$menuInner[0].scrollTop = offset;\n                    }\n                });\n\n                this.$menuInner.on('click', 'a span.dropdown-item-inner', function (e) {\n                    var $this = $(this),\n                        clickedIndex = $this.parent().data('originalIndex'),\n                        prevValue = that.$element.val(),\n                        prevIndex = that.$element.prop('selectedIndex'),\n                        triggerChange = true;\n\n                    // Don't close on multi choice menu\n                    if (that.multiple && that.options.maxOptions !== 1) {\n                        e.stopPropagation();\n                    }\n\n                    e.preventDefault();\n\n                    //Don't run if we have been disabled\n                    if (!that.isDisabled() && !$this.parent().hasClass('disabled')) {\n                        var $options = that.$element.find('option'),\n                            $option = $options.eq(clickedIndex),\n                            state = $option.prop('selected'),\n                            $optgroup = $option.parent('optgroup'),\n                            maxOptions = that.options.maxOptions,\n                            maxOptionsGrp = $optgroup.data('maxOptions') || false;\n\n                        if (!that.multiple) { // Deselect all others if not multi select box\n                            $options.prop('selected', false);\n                            $option.prop('selected', true);\n                            that.$menuInner.find('.selected').removeClass('selected').find('span.dropdown-item-inner').attr('aria-selected', false);\n                            that.setSelected(clickedIndex, true);\n                        } else { // Toggle the one we have chosen if we are multi select.\n                            $option.prop('selected', !state);\n                            that.setSelected(clickedIndex, !state);\n                            $this.blur();\n\n                            if (maxOptions !== false || maxOptionsGrp !== false) {\n                                var maxReached = maxOptions < $options.filter(':selected').length,\n                                    maxReachedGrp = maxOptionsGrp < $optgroup.find('option:selected').length;\n\n                                if ((maxOptions && maxReached) || (maxOptionsGrp && maxReachedGrp)) {\n                                    if (maxOptions && maxOptions == 1) {\n                                        $options.prop('selected', false);\n                                        $option.prop('selected', true);\n                                        that.$menuInner.find('.selected').removeClass('selected');\n                                        that.setSelected(clickedIndex, true);\n                                    } else if (maxOptionsGrp && maxOptionsGrp == 1) {\n                                        $optgroup.find('option:selected').prop('selected', false);\n                                        $option.prop('selected', true);\n                                        var optgroupID = $this.parent().data('optgroup');\n                                        that.$menuInner.find('[data-optgroup=\"' + optgroupID + '\"]').removeClass('selected');\n                                        that.setSelected(clickedIndex, true);\n                                    } else {\n                                        var maxOptionsText = typeof that.options.maxOptionsText === 'string' ? [that.options.maxOptionsText, that.options.maxOptionsText] : that.options.maxOptionsText,\n                                            maxOptionsArr = typeof maxOptionsText === 'function' ? maxOptionsText(maxOptions, maxOptionsGrp) : maxOptionsText,\n                                            maxTxt = maxOptionsArr[0].replace('{n}', maxOptions),\n                                            maxTxtGrp = maxOptionsArr[1].replace('{n}', maxOptionsGrp),\n                                            $notify = $('<div class=\"notify\"></div>');\n                                        // If {var} is set in array, replace it\n                                        /** @deprecated */\n                                        if (maxOptionsArr[2]) {\n                                            maxTxt = maxTxt.replace('{var}', maxOptionsArr[2][maxOptions > 1 ? 0 : 1]);\n                                            maxTxtGrp = maxTxtGrp.replace('{var}', maxOptionsArr[2][maxOptionsGrp > 1 ? 0 : 1]);\n                                        }\n\n                                        $option.prop('selected', false);\n\n                                        that.$menu.append($notify);\n\n                                        if (maxOptions && maxReached) {\n                                            $notify.append($('<div>' + maxTxt + '</div>'));\n                                            triggerChange = false;\n                                            that.$element.trigger('maxReached.bs.select');\n                                        }\n\n                                        if (maxOptionsGrp && maxReachedGrp) {\n                                            $notify.append($('<div>' + maxTxtGrp + '</div>'));\n                                            triggerChange = false;\n                                            that.$element.trigger('maxReachedGrp.bs.select');\n                                        }\n\n                                        setTimeout(function () {\n                                            that.setSelected(clickedIndex, false);\n                                        }, 10);\n\n                                        $notify.delay(750).fadeOut(300, function () {\n                                            $(this).remove();\n                                        });\n                                    }\n                                }\n                            }\n                        }\n\n                        if (!that.multiple || (that.multiple && that.options.maxOptions === 1)) {\n                            that.$button.focus();\n                        } else if (that.options.liveSearch) {\n                            that.$searchbox.focus();\n                        }\n\n                        // Trigger select 'change'\n                        if (triggerChange) {\n                            if ((prevValue != that.$element.val() && that.multiple) || (prevIndex != that.$element.prop('selectedIndex') && !that.multiple)) {\n                                // $option.prop('selected') is current option state (selected/unselected). state is previous option state.\n                                changed_arguments = [clickedIndex, $option.prop('selected'), state];\n                                that.$element\n                                    .triggerNative('change');\n                            }\n                        }\n                    }\n                });\n\n                this.$menu.on('click', 'a.disabled span.dropdown-item-inner , .popover-title, .popover-title :not(.close)', function (e) {\n                    if (e.currentTarget == this) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (that.options.liveSearch && !$(e.target).hasClass('close')) {\n                            that.$searchbox.focus();\n                        } else {\n                            that.$button.focus();\n                        }\n                    }\n                });\n\n                this.$menuInner.on('click', '.divider, .dropdown-header', function (e) {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    if (that.options.liveSearch) {\n                        that.$searchbox.focus();\n                    } else {\n                        that.$button.focus();\n                    }\n                });\n\n                this.$menu.on('click', '.popover-title .close', function () {\n                    that.$button.click();\n                });\n\n                this.$searchbox.on('click', function (e) {\n                    e.stopPropagation();\n                });\n\n                this.$menu.on('click', '.actions-btn', function (e) {\n                    if (that.options.liveSearch) {\n                        that.$searchbox.focus();\n                    } else {\n                        that.$button.focus();\n                    }\n\n                    e.preventDefault();\n                    e.stopPropagation();\n\n                    if ($(this).hasClass('bs-select-all')) {\n                        that.selectAll();\n                    } else {\n                        that.deselectAll();\n                    }\n                });\n\n                this.$element.change(function () {\n                    that.render(false);\n                    that.$element.trigger('changed.bs.select', changed_arguments);\n                    changed_arguments = null;\n                });\n            },\n\n            liveSearchListener: function () {\n                var that = this,\n                    $no_results = $('<li class=\"no-results\"></li>');\n\n                this.$button.on('click.dropdown.data-api', function () {\n                    that.$menuInner.find('.active').removeClass('active');\n                    if (!!that.$searchbox.val()) {\n                        that.$searchbox.val('');\n                        that.$lis.not('.is-hidden').removeClass('hidden');\n                        if (!!$no_results.parent().length) $no_results.remove();\n                    }\n                    if (!that.multiple) that.$menuInner.find('.selected').addClass('active');\n                    setTimeout(function () {\n                        that.$searchbox.focus();\n                    }, 10);\n                });\n\n                this.$searchbox.on('click.dropdown.data-api focus.dropdown.data-api touchend.dropdown.data-api', function (e) {\n                    e.stopPropagation();\n                });\n\n                this.$searchbox.on('input propertychange', function () {\n                    that.$lis.not('.is-hidden').removeClass('hidden');\n                    that.$lis.filter('.active').removeClass('active');\n                    $no_results.remove();\n\n                    if (that.$searchbox.val()) {\n                        var $searchBase = that.$lis.not('.is-hidden, .divider, .dropdown-header'),\n                            $hideItems;\n\n                        if (that.options.liveSearchNormalize) {\n                            $hideItems = $searchBase.not(':a' + that._searchStyle() + '(\"' + normalizeToBase(that.$searchbox.val()) + '\")');\n                        } else {\n                            $hideItems = $searchBase.not(':' + that._searchStyle() + '(\"' + that.$searchbox.val() + '\")');\n                        }\n\n                        if ($hideItems.length === $searchBase.length) {\n                            $no_results.html(that.options.noneResultsText.replace('{0}', '\"' + htmlEscape(that.$searchbox.val()) + '\"'));\n                            that.$menuInner.append($no_results);\n                            that.$lis.addClass('hidden');\n                        } else {\n                            $hideItems.addClass('hidden');\n\n                            var $lisVisible = that.$lis.not('.hidden'),\n                                $foundDiv;\n\n                            // hide divider if first or last visible, or if followed by another divider\n                            $lisVisible.each(function (index) {\n                                var $this = $(this);\n\n                                if ($this.hasClass('divider')) {\n                                    if ($foundDiv === undefined) {\n                                        $this.addClass('hidden');\n                                    } else {\n                                        if ($foundDiv) $foundDiv.addClass('hidden');\n                                        $foundDiv = $this;\n                                    }\n                                } else if ($this.hasClass('dropdown-header') && $lisVisible.eq(index + 1).data('optgroup') !== $this.data('optgroup')) {\n                                    $this.addClass('hidden');\n                                } else {\n                                    $foundDiv = null;\n                                }\n                            });\n                            if ($foundDiv) $foundDiv.addClass('hidden');\n\n                            $searchBase.not('.hidden').first().addClass('active');\n                            that.$menuInner.scrollTop(0);\n                        }\n                    }\n                });\n            },\n\n            _searchStyle: function () {\n                var styles = {\n                    begins: 'ibegins',\n                    startsWith: 'ibegins'\n                };\n\n                return styles[this.options.liveSearchStyle] || 'icontains';\n            },\n\n            val: function (value) {\n                if (typeof value !== 'undefined') {\n                    this.$element.val(value);\n                    this.render();\n\n                    return this.$element;\n                } else {\n                    return this.$element.val();\n                }\n            },\n\n            changeAll: function (status) {\n                if (!this.multiple) return;\n                if (typeof status === 'undefined') status = true;\n\n                this.findLis();\n\n                var $options = this.$element.find('option'),\n                    $lisVisible = this.$lis.not('.divider, .dropdown-header, .disabled, .hidden'),\n                    lisVisLen = $lisVisible.length,\n                    selectedOptions = [];\n\n                if (status) {\n                    if ($lisVisible.filter('.selected').length === $lisVisible.length) return;\n                } else {\n                    if ($lisVisible.filter('.selected').length === 0) return;\n                }\n\n                $lisVisible.toggleClass('selected', status);\n\n                for (var i = 0; i < lisVisLen; i++) {\n                    var origIndex = $lisVisible[i].getAttribute('data-original-index');\n                    selectedOptions[selectedOptions.length] = $options.eq(origIndex)[0];\n                }\n\n                $(selectedOptions).prop('selected', status);\n\n                this.render(false);\n\n                this.togglePlaceholder();\n\n                this.$element\n                    .triggerNative('change');\n            },\n\n            selectAll: function () {\n                return this.changeAll(true);\n            },\n\n            deselectAll: function () {\n                return this.changeAll(false);\n            },\n\n            toggle: function (e) {\n                e = e || window.event;\n\n                if (e) e.stopPropagation();\n\n                this.$button.trigger('click');\n            },\n\n            keydown: function (e) {\n                var $this = $(this),\n                    $parent = $this.is('input') ? $this.parent().parent() : $this.parent(),\n                    $items,\n                    that = $parent.data('this'),\n                    index,\n                    prevIndex,\n                    isActive,\n                    selector = ':not(.disabled, .hidden, .dropdown-header, .divider)',\n                    keyCodeMap = {\n                        32: ' ',\n                        48: '0',\n                        49: '1',\n                        50: '2',\n                        51: '3',\n                        52: '4',\n                        53: '5',\n                        54: '6',\n                        55: '7',\n                        56: '8',\n                        57: '9',\n                        59: ';',\n                        65: 'a',\n                        66: 'b',\n                        67: 'c',\n                        68: 'd',\n                        69: 'e',\n                        70: 'f',\n                        71: 'g',\n                        72: 'h',\n                        73: 'i',\n                        74: 'j',\n                        75: 'k',\n                        76: 'l',\n                        77: 'm',\n                        78: 'n',\n                        79: 'o',\n                        80: 'p',\n                        81: 'q',\n                        82: 'r',\n                        83: 's',\n                        84: 't',\n                        85: 'u',\n                        86: 'v',\n                        87: 'w',\n                        88: 'x',\n                        89: 'y',\n                        90: 'z',\n                        96: '0',\n                        97: '1',\n                        98: '2',\n                        99: '3',\n                        100: '4',\n                        101: '5',\n                        102: '6',\n                        103: '7',\n                        104: '8',\n                        105: '9'\n                    };\n\n\n                isActive = that.$newElement.hasClass('open');\n\n                if (!isActive && (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode >= 65 && e.keyCode <= 90)) {\n                    if (!that.options.container) {\n                        that.setSize();\n                        that.$menu.parent().addClass('open');\n                        isActive = true;\n                    } else {\n                        that.$button.trigger('click');\n                    }\n                    that.$searchbox.focus();\n                    return;\n                }\n\n                if (that.options.liveSearch) {\n                    if (/(^9$|27)/.test(e.keyCode.toString(10)) && isActive) {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        that.$menuInner.click();\n                        that.$button.focus();\n                    }\n                }\n\n                if (/(38|40)/.test(e.keyCode.toString(10))) {\n                    $items = that.$lis.filter(selector);\n                    if (!$items.length) return;\n\n                    if (!that.options.liveSearch) {\n                        index = $items.index($items.find('span.dropdown-item-inner').filter(':focus').parent());\n                    } else {\n                        index = $items.index($items.filter('.active'));\n                    }\n\n                    prevIndex = that.$menuInner.data('prevIndex');\n\n                    if (e.keyCode == 38) {\n                        if ((that.options.liveSearch || index == prevIndex) && index != -1) index--;\n                        if (index < 0) index += $items.length;\n                    } else if (e.keyCode == 40) {\n                        if (that.options.liveSearch || index == prevIndex) index++;\n                        index = index % $items.length;\n                    }\n\n                    that.$menuInner.data('prevIndex', index);\n\n                    if (!that.options.liveSearch) {\n                        $items.eq(index).children('span.dropdown-item-inner').focus();\n                    } else {\n                        e.preventDefault();\n                        if (!$this.hasClass('dropdown-toggle')) {\n                            $items.removeClass('active').eq(index).addClass('active').children('span.dropdown-item-inner').focus();\n                            $this.focus();\n                        }\n                    }\n\n                } else if (!$this.is('input')) {\n                    var keyIndex = [],\n                        count,\n                        prevKey;\n\n                    $items = that.$lis.filter(selector);\n                    $items.each(function (i) {\n                        if ($.trim($(this).children('span.dropdown-item-inner').text().toLowerCase()).substring(0, 1) == keyCodeMap[e.keyCode]) {\n                            keyIndex.push(i);\n                        }\n                    });\n\n                    count = $(document).data('keycount');\n                    count++;\n                    $(document).data('keycount', count);\n\n                    prevKey = $.trim($(':focus').text().toLowerCase()).substring(0, 1);\n\n                    if (prevKey != keyCodeMap[e.keyCode]) {\n                        count = 1;\n                        $(document).data('keycount', count);\n                    } else if (count >= keyIndex.length) {\n                        $(document).data('keycount', 0);\n                        if (count > keyIndex.length) count = 1;\n                    }\n\n                    $items.eq(keyIndex[count - 1]).children('span.dropdown-item-inner').focus();\n                }\n\n                // Select focused option if \"Enter\", \"Spacebar\" or \"Tab\" (when selectOnTab is true) are pressed inside the menu.\n                if ((/(13|32)/.test(e.keyCode.toString(10)) || (/(^9$)/.test(e.keyCode.toString(10)) && that.options.selectOnTab)) && isActive) {\n                    if (!/(32)/.test(e.keyCode.toString(10))) e.preventDefault();\n                    if (!that.options.liveSearch) {\n                        var elem = $(':focus');\n                        elem.click();\n                        // Bring back focus for multiselects\n                        elem.focus();\n                        // Prevent screen from scrolling if the user hit the spacebar\n                        e.preventDefault();\n                        // Fixes spacebar selection of dropdown items in FF & IE\n                        $(document).data('spaceSelect', true);\n                    } else if (!/(32)/.test(e.keyCode.toString(10))) {\n                        that.$menuInner.find('.active a').click();\n                        $this.focus();\n                    }\n                    $(document).data('keycount', 0);\n                }\n\n                if ((/(^9$|27)/.test(e.keyCode.toString(10)) && isActive && (that.multiple || that.options.liveSearch)) || (/(27)/.test(e.keyCode.toString(10)) && !isActive)) {\n                    that.$menu.parent().removeClass('open');\n                    if (that.options.container) that.$newElement.removeClass('open');\n                    that.$button.focus();\n                }\n            },\n\n            mobile: function () {\n                this.$element.addClass('mobile-device');\n            },\n\n            refresh: function () {\n                this.$lis = null;\n                this.liObj = {};\n                this.reloadLi();\n                this.render();\n                this.checkDisabled();\n                this.liHeight(true);\n                this.setStyle();\n                this.setWidth();\n                if (this.$lis) this.$searchbox.trigger('propertychange');\n\n                this.$element.trigger('refreshed.bs.select');\n            },\n\n            hide: function () {\n                this.$newElement.hide();\n            },\n\n            show: function () {\n                this.$newElement.show();\n            },\n\n            remove: function () {\n                this.$newElement.remove();\n                this.$element.remove();\n            },\n\n            destroy: function () {\n                this.$newElement.before(this.$element).remove();\n\n                if (this.$bsContainer) {\n                    this.$bsContainer.remove();\n                } else {\n                    this.$menu.remove();\n                }\n\n                this.$element\n                    .off('.bs.select')\n                    .removeData('selectpicker')\n                    .removeClass('bs-select-hidden selectpicker');\n            }\n        };\n\n        // SELECTPICKER PLUGIN DEFINITION\n        // ==============================\n        function Plugin(option) {\n            // get the args of the outer function..\n            var args = arguments;\n            // The arguments of the function are explicitly re-defined from the argument list, because the shift causes them\n            // to get lost/corrupted in android 2.3 and IE9 #715 #775\n            var _option = option;\n\n            [].shift.apply(args);\n\n            var value;\n            var chain = this.each(function () {\n                var $this = $(this);\n                if ($this.is('select')) {\n                    var data = $this.data('selectpicker'),\n                        options = typeof _option == 'object' && _option;\n\n                    if (!data) {\n                        var config = $.extend({}, Selectpicker.DEFAULTS, $.fn.selectpicker.defaults || {}, $this.data(), options);\n                        config.template = $.extend({}, Selectpicker.DEFAULTS.template, ($.fn.selectpicker.defaults ? $.fn.selectpicker.defaults.template : {}), $this.data().template, options.template);\n                        $this.data('selectpicker', (data = new Selectpicker(this, config)));\n                    } else if (options) {\n                        for (var i in options) {\n                            if (options.hasOwnProperty(i)) {\n                                data.options[i] = options[i];\n                            }\n                        }\n                    }\n\n                    if (typeof _option == 'string') {\n                        if (data[_option] instanceof Function) {\n                            value = data[_option].apply(data, args);\n                        } else {\n                            value = data.options[_option];\n                        }\n                    }\n                }\n            });\n\n            if (typeof value !== 'undefined') {\n                //noinspection JSUnusedAssignment\n                return value;\n            } else {\n                return chain;\n            }\n        }\n\n        var old = $.fn.selectpicker;\n        $.fn.selectpicker = Plugin;\n        $.fn.selectpicker.Constructor = Selectpicker;\n\n        // SELECTPICKER NO CONFLICT\n        // ========================\n        $.fn.selectpicker.noConflict = function () {\n            $.fn.selectpicker = old;\n            return this;\n        };\n\n        $(document)\n            .data('keycount', 0)\n            .on('keydown.bs.select', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=\"listbox\"], .bs-searchbox input', Selectpicker.prototype.keydown)\n            .on('focusin.modal', '.bootstrap-select [data-toggle=dropdown], .bootstrap-select [role=\"listbox\"], .bs-searchbox input', function (e) {\n                e.stopPropagation();\n            });\n\n        // SELECTPICKER DATA-API\n        // =====================\n        $(window).on('load.bs.select.data-api', function () {\n            $('.selectpicker').each(function () {\n                var $selectpicker = $(this);\n                Plugin.call($selectpicker, $selectpicker.data());\n            })\n        });\n    })(jQuery);\n\n\n}));"],"sourceRoot":""}